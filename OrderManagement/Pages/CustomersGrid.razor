@page "/customers-grid"
@using OrderManagement.Data.Models
@using OrderManagement.Data
@using OrderManagement.Shared.Modals
@using MudBlazor.Services

@inject OrderManagementContext _context
@inject IDialogService DialogService

<PageTitle>Customers</PageTitle>
<MudContainer MaxWidth="MaxWidth.Large" Class="mt-5">
    <MudDataGrid T="Customer"
    Items="@_customers"
    Filterable="true"
    SortMode="SortMode.Multiple"
    QuickFilter="@QuickFilter"
    Hideable="true"
    SelectedItems="_selectedCustomers"
    ReadOnly="false"
    FooterClass="d-none"
    EditMode="DataGridEditMode.Cell"
    CommittedItemChanges="EditCustomer"
    Striped Bordered Hover>

        <ToolBarContent>
            <MudText Typo="Typo.h6">Customers</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Medium" Disabled="@_disableDelete" OnClick="RemoveCustomers" />
            <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Medium" OnClick="OpenAddPlayerDialog" />
        </ToolBarContent>
        <Columns>
            <SelectColumn T="Customer" ShowInHeader="false" />
            <PropertyColumn Property="x => x.Id" Title="Id" IsEditable="false" />
            <PropertyColumn Property="x => x.Name" Title="Name" />
            <PropertyColumn Property="x => x.Orders.Count()" Title="Orders Count" IsEditable="false" />
            <PropertyColumn Property="x => x.Email" Title="Email" />
            <TemplateColumn Title="Phone">
                <CellTemplate>
                    @context.Item.Phone
                </CellTemplate>
                <EditTemplate>
                    <MudTextField @bind-Value="context.Item.Phone" Pattern="_phoneRegex" />
                </EditTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Customer" />
        </PagerContent>
    </MudDataGrid>
</MudContainer>
@code {
    private string _searchString;

    private string _phoneRegex = @"^\+?(\d{1,3})?[\s\-]?\(?\d{1,4}\)?[\s\-]?\d{1,4}[\s\-]?\d{1,4}$";

    private List<Customer> _customers = new List<Customer>();
    private HashSet<Customer> _selectedCustomers = new();

    private bool _disableDelete => _selectedCustomers.Count() == 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
    }

    private async Task LoadCustomers()
    {

        _customers = await _context.GetCustomersAsync();
    }

    private Func<Customer, bool> QuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Id.ToString().Contains(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Phone.Contains(_searchString))
            return true;

        return false;
    };

    private async Task RemoveCustomers()
    {
        _customers = _customers.Except(_selectedCustomers).ToList();
        await _context.DeleteCustomersAsync(_selectedCustomers);
        _selectedCustomers.Clear();
    }

    private async Task EditCustomer(Customer customer)
    {
        await _context.PutCustomerAsync(customer);
    }

    // modal

    private readonly DialogOptions _options = new() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true };

    private async Task OpenAddPlayerDialog()
    {
        var parameters = new DialogParameters
    {
        { "OnCustomerAdded", EventCallback.Factory.Create(this, async () => await LoadCustomers()) }
    };

        var dialog = DialogService.Show<AddCustomer>("Add Customer", parameters, _options);
        await dialog.Result;
    }

}
