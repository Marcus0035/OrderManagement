@using OrderManagement.Data.Models
@using OrderManagement.Data
@using OrderManagement.Shared.Modals
@using MudBlazor.Services

@inject OrderManagementContext _context
@inject IDialogService _dialogService
@inject ISnackbar _snackbar

@page "/items-grid"

<PageTitle>Items</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-5">
    <MudDataGrid T="Item"
                 Items="@_items"
                 SortMode="SortMode.Multiple"
                 Filterable="true"
                 QuickFilter="@QuickFilter"
                 Hideable="true"
                 SelectedItems="_selectedItems"
                 FooterClass="d-none"
                 ReadOnly="false"
                 EditMode="DataGridEditMode.Cell"
                 CommittedItemChanges="EditItem"
                 Striped Bordered Hover>

        <ToolBarContent>
            <MudText Typo="Typo.h6">Items</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Medium" Disabled="@_disableDelete" OnClick="RemoveItems" />
            <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Medium" OnClick="OpenAddItemDialog" />
        </ToolBarContent>
        <Columns>
            <SelectColumn T="Item" ShowInHeader="false" />
            <PropertyColumn Property="x => x.Id" Title="Id" IsEditable="false" />
            <PropertyColumn Property="x => x.Name" Title="Name" />
            <PropertyColumn Property="x => x.Price" Title="Price" />
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Item" />
        </PagerContent>
    </MudDataGrid>
</MudContainer>

@code {
    private List<Item> _items = new List<Item>();
    private HashSet<Item> _selectedItems = new();
    private string _searchString = string.Empty;

    private bool _disableDelete => _selectedItems.Count() == 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
    }

    private async Task LoadItems()
    {
        _items = await _context.GetItemsAsync();
    }
    private Func<Item, bool> QuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };


    private async Task RemoveItems()
    {
        _items = _items.Except(_selectedItems).ToList();
        await _context.DeleteItemsAsync(_selectedItems);
        _selectedItems.Clear();
    }

    private async Task EditItem(Item item)
    {
        await _context.PutItemAsync(item);
        _snackbar.Add("Item updated", Severity.Success);
    }


    // modal

    private readonly DialogOptions _options = new() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true };

    private async Task OpenAddItemDialog()
    {
        var parameters = new DialogParameters
        {
            { "OnItemAdded", EventCallback.Factory.Create(this, async () => await LoadItems()) }
        };

        var dialog = _dialogService.Show<AddItem>("Add Item", parameters, _options);
        await dialog.Result;
    }


}