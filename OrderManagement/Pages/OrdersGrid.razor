@using OrderManagement.Data.Models
@using OrderManagement.Data
@using OrderManagement.Shared.Modals
@using System.Globalization;
@inject OrderManagementContext _context
@inject NavigationManager _navigationManager

@page "/orders-grid"


<PageTitle>Orders</PageTitle>


<MudContainer MaxWidth="MaxWidth.Large" Class="mt-5">
    <MudDataGrid T="Order"
                 Items="@_orders"
                 SelectedItems="@_selectedOrders"
                 Filterable="true"
                 SortMode="SortMode.Multiple"
                 QuickFilter="@QuickFilter"
                 Hideable="true"
                 FooterClass="d-none"
                 Striped Bordered Hover
                 RowClick="OpenOrderDetails">

        <ToolBarContent>
            <MudText Typo="Typo.h6">Orders</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Medium" OnClick="OpenAddOrderPage" />
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Medium" Disabled="@_disableDeleteAndPay" OnClick="RemoveOrders" />
            <MudIconButton Icon="@Icons.Material.Filled.AttachMoney" Color="Color.Success" Size="Size.Medium" Disabled="@_disableDeleteAndPay" OnClick="PayOrders" />
        </ToolBarContent>
        <Columns>
            <SelectColumn T="Order" ShowInHeader="false" />
            <PropertyColumn Property="x => x.Id" Title="Id" IsEditable="false" />
            <TemplateColumn Title="Customer">
                <CellTemplate>
                    <MudStack Row>
                        <MudText><b>@context.Item.Customer.Name</b></MudText>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property='x => x.GetTotalDueAmount()' Title="Total Due" Format="C" />
            <PropertyColumn Property='x => x.OrderDate' Format="d" Title="Date" />
            <TemplateColumn Title="Paid">
                <CellTemplate>
                    <MudStack Row>
                        <MudChip Color="@GetBadgeColor(context.Item.Paid)" Variant="Variant.Text">
                            @GetBadgeText(context.Item.Paid)
                        </MudChip>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>

        </Columns>

        <PagerContent>
            <MudDataGridPager T="Order" />
        </PagerContent>
    </MudDataGrid>
</MudContainer>


@code {
    private List<Order> _orders = new();
    private HashSet<Order> _selectedOrders = new();
    private string _searchString = string.Empty;

    private bool _disableDeleteAndPay => _selectedOrders.Count() == 0;

    protected override async Task OnInitializedAsync()
    {
        CultureInfo.DefaultThreadCurrentCulture = new CultureInfo("cs-CZ");
        _orders = await _context.GetOrdersAsync();
    }

    private Func<Order, bool> QuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Id.ToString().Contains(_searchString))
            return true;

        if (x.Customer.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.OrderDate.ToString("dd.MM.yyyy").Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;


        return false;
    };

    private async Task RemoveOrders()
    {
        _orders = _orders.Except(_selectedOrders).ToList();
        await _context.DeleteOrderAsync(_selectedOrders);
        _selectedOrders.Clear();
    }

    private async Task PayOrders()
    {
        await _context.ChangePaymentStatusAsync(_selectedOrders);
        _selectedOrders.Clear();
    }
    // bagde
    private Color GetBadgeColor(bool paid)
    {
        return paid ? Color.Info : Color.Error;
    }

    private string GetBadgeText(bool paid)
    {
        return paid ? "Paid" : "Unpaid";
    }

    private void OpenAddOrderPage()
    {
        _navigationManager.NavigateTo("/add-edit-order");
    }
    private async Task OpenOrderDetails(DataGridRowClickEventArgs<Order> args)
    {
        var order = args.Item;

        _navigationManager.NavigateTo($"/add-edit-order/{order.Id}");
    }



}